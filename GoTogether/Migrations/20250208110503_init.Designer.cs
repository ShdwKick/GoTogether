// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.Data;

#nullable disable

namespace GoTogether.Migrations
{
    [DbContext(typeof(DatabaseConnection))]
    [Migration("20250208110503_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.Data.AuthorizationToken", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("c_hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("c_token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("AuthorizationTokens");
                });

            modelBuilder.Entity("Server.Data.City", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("c_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("f_country_id")
                        .HasColumnType("uuid");

                    b.Property<double>("n_latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("n_longitude")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Server.Data.Codes", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("c_email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("d_expiration_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("n_code")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("ConfirmationCodes", (string)null);
                });

            modelBuilder.Entity("Server.Data.Country", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("c_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("n_latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("n_longitude")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Server.Data.Landmark", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("c_address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("c_description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("c_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("f_city_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("f_country_id")
                        .HasColumnType("uuid");

                    b.Property<double>("n_latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("n_longitude")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.ToTable("Landmarks");
                });

            modelBuilder.Entity("Server.Data.Trip", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("c_description")
                        .HasColumnType("text");

                    b.Property<string>("c_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("d_end_date")
                        .HasColumnType("date");

                    b.Property<DateOnly>("d_start_date")
                        .HasColumnType("date");

                    b.Property<Guid>("f_author")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("f_author");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Server.Data.TripCity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("f_city_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("f_trip_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.ToTable("TripCities");
                });

            modelBuilder.Entity("Server.Data.TripCountrie", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("f_country_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("f_trip_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.ToTable("TripCountries");
                });

            modelBuilder.Entity("Server.Data.TripInvites", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("c_code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("f_trip_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("f_trip_id");

                    b.ToTable("TripInvites");
                });

            modelBuilder.Entity("Server.Data.TripLandmark", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("f_landmark_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("f_trip_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.ToTable("TripLandmarks");
                });

            modelBuilder.Entity("Server.Data.TripRole", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("b_is_can_banish")
                        .HasColumnType("boolean");

                    b.Property<bool>("b_is_can_delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("b_is_can_edit")
                        .HasColumnType("boolean");

                    b.Property<bool>("b_is_can_invite")
                        .HasColumnType("boolean");

                    b.Property<string>("c_description")
                        .HasColumnType("text");

                    b.Property<string>("c_dev_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("c_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("TripRoles");
                });

            modelBuilder.Entity("Server.Data.UserData", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserRoleid")
                        .HasColumnType("uuid");

                    b.Property<bool>("b_is_mail_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("c_email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("c_nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("c_password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("d_registration_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("f_authorization_token")
                        .HasColumnType("uuid");

                    b.Property<Guid>("f_role")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("UserRoleid");

                    b.HasIndex("f_authorization_token")
                        .IsUnique();

                    b.HasIndex("f_role");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Server.Data.UserRole", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("c_description")
                        .HasColumnType("text");

                    b.Property<string>("c_dev_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("c_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Server.Data.UserTrips", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TripRoleid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Tripid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("f_trip_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("f_user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("f_user_trip_role")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("TripRoleid");

                    b.HasIndex("Tripid");

                    b.HasIndex("Userid");

                    b.HasIndex("f_trip_id");

                    b.HasIndex("f_user_id");

                    b.HasIndex("f_user_trip_role");

                    b.ToTable("UserTrips");
                });

            modelBuilder.Entity("Server.Data.Trip", b =>
                {
                    b.HasOne("Server.Data.UserData", null)
                        .WithMany()
                        .HasForeignKey("f_author")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Data.TripInvites", b =>
                {
                    b.HasOne("Server.Data.Trip", null)
                        .WithMany()
                        .HasForeignKey("f_trip_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Data.UserData", b =>
                {
                    b.HasOne("Server.Data.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.AuthorizationToken", null)
                        .WithOne()
                        .HasForeignKey("Server.Data.UserData", "f_authorization_token")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.UserRole", null)
                        .WithMany()
                        .HasForeignKey("f_role")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Server.Data.UserTrips", b =>
                {
                    b.HasOne("Server.Data.TripRole", "TripRole")
                        .WithMany()
                        .HasForeignKey("TripRoleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("Tripid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.UserData", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Trip", null)
                        .WithMany()
                        .HasForeignKey("f_trip_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.UserData", null)
                        .WithMany()
                        .HasForeignKey("f_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.TripRole", null)
                        .WithMany()
                        .HasForeignKey("f_user_trip_role")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("TripRole");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
